Deploying metrics-server on Kubernetes Cluster Installed with kubeadm
+-------------------------------------------------------------------+
Read: https://syself.com/blog/secure-metrics-server to understand more why you shouldn't use kubelet-insecure-tls


Running Metrics-Server Securely
===============================
Adding "serverTLSBootstrap: true" in cluster’s kubelet ConfigMap kubelet-config.
# kubectl get cm -A
# kubectl edit cm kubelet-config -n kube-system
# kubectl get cm kubelet-config -n kube-system -o yaml | grep server
    serverTLSBootstrap: true
	

Adding "serverTLSBootstrap: true" into config.yaml under /var/lib/kubelet/ on all cluster nodes.
# vi /var/lib/kubelet/config.yaml


To make the newly added configuration to work, we need to restart kubelet daemon on all nodes:
# sudo systemctl restart kubelet.service


check if there’s any CSR created:
$ kubectl get csr
$ kubectl certificate approve <CSR>



References:
https://particule.io/en/blog/kubeadm-metrics-server/
https://blog.zespre.com/deploying-metrics-server-on-kubernetes-cluster-installed-with-kubeadm.html




Deploy metrics server in HA Mode
================================
Note:
This configuration requires having a cluster with at least 2 nodes on which Metrics Server can be scheduled. To install the latest Metrics Server release in high availability mode from the 
high-availability.yaml manifest, run the following command.

[root@master ~]# curl -LO https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/high-availability.yaml
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
100  4689  100  4689    0     0   3727      0  0:00:01  0:00:01 --:--:--  3727
[root@master ~]#
[root@master ~]#
[root@master ~]# ls
anaconda-ks.cfg  canal.yaml  components.yaml  high-availability.yaml  init.log
[root@master ~]#
[root@master ~]# vi high-availability.yaml
[root@master ~]# kubectl apply -f high-availability.yaml
serviceaccount/metrics-server created
clusterrole.rbac.authorization.k8s.io/system:aggregated-metrics-reader created
clusterrole.rbac.authorization.k8s.io/system:metrics-server created
rolebinding.rbac.authorization.k8s.io/metrics-server-auth-reader created
clusterrolebinding.rbac.authorization.k8s.io/metrics-server:system:auth-delegator created
clusterrolebinding.rbac.authorization.k8s.io/system:metrics-server created
service/metrics-server created
deployment.apps/metrics-server created
apiservice.apiregistration.k8s.io/v1beta1.metrics.k8s.io created
error: resource mapping not found for name: "metrics-server" namespace: "kube-system" from "high-availability.yaml": no matches for kind "PodDisruptionBudget" in version "policy/v1beta1"
ensure CRDs are installed first
[root@master ~]#
[root@master ~]# kubectl explain PodDisruptionBudget
KIND:     PodDisruptionBudget
VERSION:  policy/v1

DESCRIPTION:
     PodDisruptionBudget is an object to define the max disruption that can be
     caused to a collection of pods

FIELDS:
   apiVersion   <string>
     APIVersion defines the versioned schema of this representation of an
     object. Servers should convert recognized schemas to the latest internal
     value, and may reject unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources

   kind <string>
     Kind is a string value representing the REST resource this object
     represents. Servers may infer this from the endpoint the client submits
     requests to. Cannot be updated. In CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds

   metadata     <Object>
     Standard object's metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata

   spec <Object>
     Specification of the desired behavior of the PodDisruptionBudget.

   status       <Object>
     Most recently observed status of the PodDisruptionBudget.

[root@master ~]# vi high-availability.yaml																				# change Api version from policy/v1beta1 to policy/v1
[root@master ~]# kubectl apply -f high-availability.yaml
serviceaccount/metrics-server unchanged
clusterrole.rbac.authorization.k8s.io/system:aggregated-metrics-reader unchanged
clusterrole.rbac.authorization.k8s.io/system:metrics-server unchanged
rolebinding.rbac.authorization.k8s.io/metrics-server-auth-reader unchanged
clusterrolebinding.rbac.authorization.k8s.io/metrics-server:system:auth-delegator unchanged
clusterrolebinding.rbac.authorization.k8s.io/system:metrics-server unchanged
service/metrics-server unchanged
deployment.apps/metrics-server configured
poddisruptionbudget.policy/metrics-server created
apiservice.apiregistration.k8s.io/v1beta1.metrics.k8s.io unchanged

[root@master ~]# kubectl get deployment metrics-server -n kube-system



References:
https://computingforgeeks.com/how-to-deploy-metrics-server-to-kubernetes-cluster/?expand_article=1




Validating Metrics server installation
======================================
$ k get APIservice v1beta1.metrics.k8s.io
NAME                                   SERVICE                      AVAILABLE                      AGE
v1beta1.metrics.k8s.io                 kube-system/metrics-server   False (FailedDiscoveryCheck)   2m32s


$ k top nodes
Error from server (ServiceUnavailable): the server is currently unable to handle the request (get nodes.metrics.k8s.io)


$ k describe APIservice v1beta1.metrics.k8s.io
...
Status:
  Conditions:
    Last Transition Time:  2023-07-17T11:08:19Z
    Message:               failing or missing response from https://10.64.7.122:443/apis/metrics.k8s.io/v1beta1: Get "https://10.64.7.122:443/apis/metrics.k8s.io/v1beta1": dial tcp 10.64.7.122:443: connect: no route to host
    Reason:                FailedDiscoveryCheck
    Status:                False
    Type:                  Available
Events:                    <none>




Troubleshooting:
=-------------=
$ k get svc -A -o wide
$ k get pods -A --show-labels

$ kubectl logs -n kube-system -l k8s-app=metrics-server --container metrics-server
$ k describe APIservice v1beta1.metrics.k8s.io
...
Status:
  Conditions:
    Last Transition Time:  2023-07-17T11:08:19Z
    Message:               failing or missing response from https://10.64.7.122:443/apis/metrics.k8s.io/v1beta1: Get "https://10.64.7.122:443/apis/metrics.k8s.io/v1beta1": dial tcp 10.64.7.122:443: i/o timeout
    Reason:                FailedDiscoveryCheck
    Status:                False
    Type:                  Available
Events:                    <none>


# k get svc metrics-server -n kube-system
NAME             TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)   AGE
metrics-server   ClusterIP   10.64.12.135   <none>        443/TCP   56m


$ kubectl run dnsutils --image=chieme/curl --command -- sleep infinity
$ k exec -it dnsutils -- bash
root@dnsutils:/# for value in {1..5}; do curl 10.64.12.135:443; done




TEST 1: Disable firewall on all nodes
=====================================
Step 1: Disable firewall and watch
# systemctl disable firewalld && systemctl stop firewalld

$ k get APIservice v1beta1.metrics.k8s.io
NAME                                   SERVICE                      AVAILABLE   AGE
v1beta1.metrics.k8s.io                 kube-system/metrics-server   True        13m



$ k describe APIservice v1beta1.metrics.k8s.io
...
Status:
  Conditions:
    Last Transition Time:  2023-07-17T11:21:09Z
    Message:               all checks passed
    Reason:                Passed
    Status:                True
    Type:                  Available
Events:                    <none>


$ watch -n2 kubectl top nodes
NAME     CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%
master   509m         25%    2674Mi          73%
node1    186m         9%     2563Mi          70%
node2    559m         27%    2518Mi          69%


Comment:
Nodes can reach each other after firewall was disabled, so it's a problem with firewall
I tried different variations of firewall ports, but issues persisted. I decided to ditch Calico, and try another CNI. I tried Cilium, and metrics-server worked out-of-the-box.





