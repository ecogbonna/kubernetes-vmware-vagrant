Docker Components / Terminologies:
	Docker daemon
	Docker Client
	Docker Image 
	Docker container
	Docker registry 

There are two editions of Docker available:
	Community Edition (CE):
	Enterprise Edition (EE): 



Linux Container Primitives: cgroups, namespaces, and more!
=--------------------------------------------------------=
(see linux-container-primitives.pdf file in folder)

Linux Container Primitives
	- Runtime
	- Linux Namespaces 
	- Linux Cgroups 
	- Union File Systems

Linux Control groups: Cgroups
	- Subsystems: cgroups concrete implmentations. independent
	- Hierarchical representation
	- cgroup virtual filesystem

+-----------------+
Demo: Linux Cgroups
+-----------------+
ls /sys/fs/cgroup						# cgroups subsystems
ls /sys/fs/cgroup/devices				# subsystem Hierarchy
ls /sys/fs/cgroup/devices/tasks			# pid associated with this cgroup in this subsystem
ls /proc								# virtal fs contains directories that corresponds to each pid

echo $$									# get current shell
cat /proc/5222/cgroup					# get the cgroup subsystems of the current shell


# make a new cgroup

sudo mkdir /sys/fs/cgroup/pids/lfnw		
ls /sys/fs/cgroup/pids/lfnw								# notice the virtual files
cat /sys/fs/cgroup/pids/lfnw/tasks						# there should be no task
echo 5222 | sudo tee /sys/fs/cgroup/pids/lfnw/tasks		# move current shell into the new cgroup
cat /proc/5222/cgroup									# pids subsystem should be lfnw							
cat /sys/fs/cgroup/pids/lfnw/tasks						# notice another pid in addition to the shell; this is the pid of the child process, in this case the cat command
cat /sys/fs/cgroup/pids/lfnw/tasks						# the pid keeps changing for each run
cat /sys/fs/cgroup/pids/lfnw/tasks
$(cat /sys/fs/cgroup/pids/lfnw/tasks 1>&2)				# lets run three processes: shell, subshell, cat
cat /sys/fs/cgroup/pids/lfnw/pids.max					# 'max' indicates unlimited
echo 2 | sudo tee /sys/fs/cgroup/pids/lfnw/pids.max		# The tee command reads standard input (stdin) and writes it to both standard output (stdout) and one or more files.
$(cat /sys/fs/cgroup/pids/lfnw/tasks 1>&2)				# should throw error


+-----------------------+
Demo: Docker and cgroups:
+-----------------------+
docker run --name demo --cpu-shares 256 -d --rm amazonlinux sleep 600
docker exec demo ls /sys/fs/cgroup/cpu
docker exec demo ls /sys/fs/cgroup/cpu/cpu.shares
ls /sys/fs/cgroup/cpu/docker
ls /sys/fs/cgroup/cpu/docker/<container_id>/cpu.shares



Linux Namespaces:
	Namespace kinds/types
	Namespace sharing
	Namespace kinds
		Network namespace
		Mount namespace
	procfs virtual filesystem: file (namespace type: inode number) are symbolic links to a namespace kind
	creating namespaces
	persisting namespaces
	entering namespaces

+----------------------+
Demo: network namespaces
+----------------------+
ip link

	lo: interface used for localhost
	eth0: host interface to the internet
	docker0: docker bridge

sudo unshare --net ip link							# create new network namespace, notice it has only lo. The namespace will not persist if nothing keeps it open
sudo unshare --net bash								# run a shell in a new namespace to keep it open
ip link
readlink /proc/$$/ns/*								# viewing namespaces

touch /var/run/netns/lfnw							# persist the namespace using a bind mount
mount --bind /proc/$$/ns/net /var/run/netns/lfnw
ip netns list
ip netns identify $$
exit						
ip netns list										# namespace persisted
ip netns identify $$								# but we're not running in it
sudo ip netns exec lfnw ip link


+----------------------------------+
Demo: Docker and network namespaces:
+----------------------------------+

docker run --name redis --detach redis
ps -ax | grep redis

sudo readlink /proc/<redis pid>/ns/net						# get the namespace
docker inspect redis | jq .[0].NetworkSettings.IPAddress	
sudo nsenter --target <pid> --net ifconfig eth0				# check if IP matches the IP address in the namespace
ip link | grep veth
ifconfig veth<id>


pidof redis-server
sudo nsenter --target <pid> --net nginx				# attempt running something else other than redis-server in this namespace i.e. run binary from the containers host in the containers network namespace
curl localhost 										# it should fail
ps -ax | grep nginx
sudo nsenter --target <pid> --net ifconfig			# nginx is running, but not in the container's network namespace
curl <IP Address>


+--------------------------------+
Demo: Docker and mount namespaces:
+--------------------------------+
docker run --name redis --detach redis
docker inspect --format "{{ .NetworkSettings.IPAddress}]" redis

telnet <IP> 6379
PING																	# call PING and QUIT APIs while still connected to telnet
QUIT

ps ax | grep redis
sudo nsenter --target 27777 --mount /usr/local/bin/redis-server			# use binary from the container and run it on the host

telnet localhost 6379
PING 
QUIT



Images, Layers and Union file systems:
	Filesystem Images
		Images are a representation of filesystems
		
	How Docker layers works
		the concept of layers
		
	Union filesystems
		Overlay filesystem
			upperdir
			lowerdir
			diff


+--------------------------------+
Demo: Union Filesystems:
+--------------------------------+
docker pull amazonlinux
sudo ls /var/lib/docker												# docker image metadata
sudo ls /var/lib/docker/image/overlay2/imagedb/content/sha256
sudo cat /var/lib/docker/image/overlay2/imagedb/content/sha256/<manifest> | jq . | less
sudo ls -l /var/lib/docker/image/overlay2
lsblk
ls -l /dev/<block device>
sudo ls /var/lib/docker/image/overlay2/<>

docker build -t layer-example .
sudo ls /var/lib/docker/image/overlay2/								# Notice new directory added and explore

docker create --name demo layer-example sleep 600					
sudo ls /var/lib/docker/image/overlay2/								# Notice new directory added with "<name>.init" 

docker start demo
docker exec demo cat /proc/mounts | grep overlay



Container runtime
Software tool that onfigures Linux container primitives to create and run containers on a host.
	- OCI runtime spec
		JSON doc describes Linux primitives, capabilities, Security modules and more
	- OCI runtime hooks


+---------------------+
Demo: Container runtime
+---------------------+
docker run --detach amazonlinux sleep 600
sudo ls -l /var/run/containerd/io.containerd.runtime.v1.linux/moby
sudo ls -l /var/run/containerd/io.containerd.runtime.v1.linux/moby/<OCI bundle>
sudo ls -l /var/run/containerd/io.containerd.runtime.v1.linux/moby/<OCI bundle>/config.json | jq . | less
sudo ls -l /var/run/containerd/io.containerd.runtime.v1.linux/moby/<OCI bundle>/config.json | jq .root


	
Container vs VM Tutorial
=----------------------=
docker run -it centos:latest uname -a		# Think of docker as an application launcher rather than a virtual platform: docker container daemon => container root => Application
docker run -it ubuntu:14.04 uname -a



Container - Network NAMESPACES tutorial
=----------------------------------------=
eth0 - Container
Isolated Namespace veth Peer: prevent direct connection to the shared docker bridge
dedicated virtual ethernet interface (veth): Host Bridged Interface
shared docker bridge (docker0): connectivity between host and running containers
iptables rules/NAT: outbound connectivity between bridge and host network interface
eth0 - Host: host ethernet adapter



ip link show							# check the bridge
ip addr show							# check the IP assigned to the bridge
brctl showmacs docker0

docker run -d gremlin961/flask-test
ip link show							# Notive the veth
brctl showmacs docker0
docker ps
docker exec -it <container ID> ip addr show



Docker quick tutorial
=-------------------=
FROM ubuntu:latest
MAINTAINER vagrant
RUN echo "Hello world" >> test.txt
CMD cat test.txt


docker build -t myapp .
docker run -it myapp			# it Interactive pseudo terminal
docker inspect myapp



FROM ubuntu:latest
MAINTAINER vagrant
RUN echo "Hello world" >> test.txt
RUN apt-get update && apt-get install -y iputils-ping
CMD cat test.txt


docker run -it myapp ping -c 5 www.google.com			# should throw error

docker build -t myapp:ping .							# Notice "using cache": it means we already have that layer, we just referenced it
docker images

docker run -it myapp:ping ping -c 5 www.google.com
docker run -it myapp ping -c 5 www.google.com			# still should throw error